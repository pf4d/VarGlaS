from cslvr import *

# directories for loading or saving data :
msh_dir = './dump/meshes/'  # directory where the mesh is located
out_dir = './dump/vars/'    # directory to save initialization

thklim  = 1.0          # [m] thickness limit
L       = 500000.0     # [m] mesh radius
Rel     = 450000       # [m] radial distance at which S_ring becomes negative
s       = 1e-5         # [a^{-1}] accumulation/ablation coefficient
Tmin    = 238.15       # [K] minimum temperature (located at divide)
St      = 1.67e-5      # [K m^{-1}] lapse rate

# load the mesh that was generated by gen_cylinder.py :
mesh    = Mesh(msh_dir + 'cylinder_mesh.xml.gz')

# these are the mesh attributes which we use to deform :
xmin    = -L
xmax    =  L
ymin    = -L
ymax    =  L

# width and origin of the domain for deforming x coord :
width_x  = xmax - xmin
offset_x = xmin

# width and origin of the domain for deforming y coord :
width_y  = ymax - ymin
offset_y = ymin

# iterate through the mesh coordinates and alter the horizontal components :
for x in mesh.coordinates():
	x[0]  = x[0]  * width_x           # transform x
	x[1]  = x[1]  * width_y           # transform y

# initialize the model :
model = D3Model(mesh, out_dir=out_dir, use_periodic=False)

# form the 2D upper-surface mesh :
model.form_srf_mesh()

# form a 2D model using the upper-surface mesh :
srfmodel = D2Model(model.srfmesh,
                   out_dir      = out_dir,
                   use_periodic = False,
                   kind         = 'submesh')

# set the model geometry and deform the mesh z coordinate to match :
model.deform_mesh_to_geometry(S=thklim, B=0)

# define the surface mass balance :
class S_ring(Expression):
	def eval(self, values, x):
		values[0] = min(0.5, s * (Rel - sqrt(x[0]**2 + x[1]**2)))
s_ring = S_ring(element=model.Q.ufl_element())

# define the surface temperature :
class SurfaceTemperature(Expression):
	def eval(self, values, x):
		values[0] = Tmin + St * sqrt(x[0]**2 + x[1]**2)
T_s = SurfaceTemperature(element=model.Q.ufl_element())

# initialize the 3D model variables :
model.init_S_ring(s_ring)       # upper surface-mass balance
model.init_T_surface(T_s)       # upper surface temperature
model.init_q_geo(model.ghf)     # geothermal heat flux

lst = [model.S,
       model.B,
       model.sigma,
       model.mask,
       model.q_geo,
       model.T_surface,
       model.S_ring,
       model.U_mask]

f  = HDF5File(mpi_comm_world(), out_dir + 'state.h5',  'w')
fm = HDF5File(mpi_comm_world(), out_dir + 'meshes.h5', 'w')

model.save_list_to_hdf5(lst, f)
model.save_subdomain_data(f)
model.save_mesh(fm)
model.save_srf_mesh(fm)

f.close()



